declare const CSidebar: import("vue").DefineComponent<{
    /**
     * Make sidebar narrow.
     */
    narrow: {
        type: BooleanConstructor;
        required: false;
    };
    /**
     * Set sidebar to overlaid variant.
     */
    overlaid: {
        type: BooleanConstructor;
        required: false;
    };
    /**
     * Place sidebar in non-static positions.
     */
    position: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component small, large, or extra large.
     */
    size: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Expand narrowed sidebar on hover.
     */
    unfoldable: BooleanConstructor;
    /**
     * Toggle the visibility of sidebar component.
     */
    visible: BooleanConstructor;
}, () => any[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("hide" | "show" | "visible-change")[], "hide" | "show" | "visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Make sidebar narrow.
     */
    narrow: {
        type: BooleanConstructor;
        required: false;
    };
    /**
     * Set sidebar to overlaid variant.
     */
    overlaid: {
        type: BooleanConstructor;
        required: false;
    };
    /**
     * Place sidebar in non-static positions.
     */
    position: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component small, large, or extra large.
     */
    size: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Expand narrowed sidebar on hover.
     */
    unfoldable: BooleanConstructor;
    /**
     * Toggle the visibility of sidebar component.
     */
    visible: BooleanConstructor;
}>> & {
    onHide?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
    "onVisible-change"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    size: string;
    position: string;
    narrow: boolean;
    overlaid: boolean;
    unfoldable: boolean;
}>;
export { CSidebar };
